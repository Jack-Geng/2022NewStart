
349 intersection-of-two-arrays
https://leetcode.com/problems/intersection-of-two-arrays/

来思考下
模拟：模拟题目的运行。
规律：尝试总结出题目的一般规律和特点。
匹配：找到符合这些特点的数据结构与算法。
边界：考虑特殊情况

模拟：模拟题目的运行。
给了两个数组，来看看这两个数组的交集，结果值唯一

这个题目的解题思路很多，目前想到的就很多个解法，咱们一个个来思考

class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        return list(set(nums1).intersection(set(nums2)))

这个思路是直接调用了系统API set的交集，为什么可以这么做，因为结果要求元素唯一，且 顺序不一定要求

但直接调用系统API做，面试肯定过不去，最起码得自己实现set的交集操作吧

那要怎么做呢？？？
return list(set(nums1) & set(nums2))

刚刚就写过这个，怎么就给忘记了呢？？？

那么这么做的时间和空间复杂度是多少呢
- 时间复杂度 - build set需要O（N）* 2, 然后做交集需要 O（N）
- 空间复杂度，由于要build 两个set，所以O（N）* 2

那么有没有优化的空间，来思考下，把这道题目简化就是问一个元素在一个数组里存在没有，常规做法是O（N），全部看

但是有没有更好的方法，对数组排序？O(NlogN)，然后二分查 logN，值得庆幸的是排序只需要做一次

class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        def helper(nums, target):
            left, right = 0, len(nums) - 1
            while left <= right:
                mid = left + (right - left) / 2
                if nums[mid] == target:
                    return True
                elif nums[mid] > target:
                    right = mid - 1
                else:
                    left = mid + 1
            return False
        
        len1, len2 = len(nums1), len(nums2)
        if len1 > len2:
            nums1, nums2 = nums2, nums1
        #here we make sure nums1 is the smaller one
        #we only want to sort nums2
        nums2.sort()
        res = set()
        for i in nums1:
            if helper(nums2, i):
                res.add(i)
                
        return list(res)
        