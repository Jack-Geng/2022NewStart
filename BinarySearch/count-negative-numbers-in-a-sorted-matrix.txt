
1351 https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/

来思考下
模拟：模拟题目的运行。
规律：尝试总结出题目的一般规律和特点。
匹配：找到符合这些特点的数据结构与算法。
边界：考虑特殊情况

模拟：模拟题目的运行。
遍历每一行，只要是数字小于0，是负数，我们就 res += 1

规律：尝试总结出题目的一般规律和特点。
这是个2D数组，那么2D数组的遍历方式会么，如果暴力遍历2D数组，那么时间复杂度就是O（N * N），那么3D数组，就是N * N * N的时间复杂度
        for (int i = 0; i < grid.length; i++)
        {
            for(int j = 0; j < grid[i].length; j++)
            {
                if(grid[i][j] < 0)
                    res += 1;
            }
        }

这里考察的是数组的遍历，Array的遍历，算法 - 暴力破解

但你要仔细看题目啊
- 人家数组是排好序的，但注意是降序排列

4   3   2   -1
3   2   1   -1
1   1   -1  -2
-1  -1  -2  -3

你仔细看，发现了什么规律了么，一旦一个数字是负数，后面的所有的数字都是负数，再看一个这样的例子

4   -1  -2  -3
3   -2  -3  -4
2   -3  -4  -5
1   -4  -5  -6

我们可以对每行进行二分查找，找到-1的插入位置，假设-1存在，就拿上面第一个2D数组来说的话，它的插入位置就是 index = 3
对于第二个2D数组来说，-1的第一行的插入位置就是1，那说明啥，说明1之前都是正数啊，1之后（include 1）都是负数，那么我们还需要再比较后面的数字么，显然不用，res += grid[i].length - insert_pos

但是insert_pos == grid[i].length 的话，那么说明该行就没有负数

可以先写一个二分查找的helper，然后apply每一行，然后再考虑优化每列的选择

看。。。这样的写法，就beat 100%的runtime

class Solution {
    public int countNegatives(int[][] grid) 
    {
        int res = 0;
        for (int i = 0; i < grid.length; i++)
        {
            int left = helper(grid[i]);
            if ( left < grid[i].length)
                res += grid[i].length - left;
        }
        return res;
    }
    
    private int helper(int[] row)
    {
        int left = 0, right = row.length;
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if (row[mid] <= -1) //-1 is left-most, 0 is right-most
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
}

但是我们还没有考虑列的排序情况
- 根据行和列同时来找的话，我们首先得确定行，知道哪一行有负数，然后才可以
4   1  -2  -3
3   1  -3  -4
-2   -3  -4  -5
-3   -4  -5  -6

对于这个数组来说，第一行有负数，确定了index 1为负数的开始，那么开始按照列来查找，第二列开始有负数，那么行和列的交集，4 - 1 = 3 * (4 - 1) = 9

这个思路也不对，那么按照我更新后的矩阵来说，是没有办法简单的apply 乘法的，那么column的排序信息真的是噪音么？？？？？

算了 不纠结这个了

但还是得有个问题得考虑下，边界情况
如果第一个数字就是负数，那么基本就不用执行二分查找了，如果最后一个是正数，也不用执行二分查找

class Solution {
    public int countNegatives(int[][] grid) 
    {
        int res = 0;
        for (int i = 0; i < grid.length; i++)
        {
            if(grid[i][0] < 0)
            {
                res += grid[i].length;
                continue;
            }
            if(grid[i][grid[i].length - 1] > 0)
                continue;
                
            int left = helperRow(grid[i]);
            if ( left < grid[i].length)
                res += grid[i].length - left;
        }
        return res;
    }
    
    private int helperRow(int[] row)
    {
        int left = 0, right = row.length;
        while(left < right)
        {
            int mid = left + (right - left) / 2;
            if (row[mid] <= -1) //-1 is left-most, 0 is right-most
                right = mid;
            else
                left = mid + 1;
        }
        return left;
    }
}

