
For 2022 new start


why I need to do this whole thing again, the truth is you cannot just do something for something,


througth this time amamzon oa, I thought I was perfectly ready for any challenge, but the truth is you still are thinking using old way, doing the thing using old way, so the reuslt is same.


I really need to take this channce to think deeper before next time I lost myself in the blindness confident.

一、战略上藐视算法题在战略上藐视算法题的目的是为了在心理层面上克服恐惧，事实上，不仅仅是算法题，诸如学习计算机基础、计算机网络、编译原理等程序员必备的知识时，有这个心态可以学起来事半功倍。我亲身经历过这样的改变。作为一个转行程序员，在转行学习编程的那段日子，没有人告诉我说要去学数据结构，也没有人告诉我说要去刷 LeetCode，都是靠自己一个人摸索，绝大部分的时间都花在具体项目上，误认为自己和那些已经工作的程序员的区别在于有没有做过项目。这就是科班出身和非科班出身的学生最大的区别，科班出身的学生知道去学什么，知道大学期间安排的每一门课程是干什么的，知道要先去做哪些小项目来循序渐进的编码练习，知道知识点在工作中能起到什么样的具体作用，非科班出身的程序员感觉计算机相关的知识点简直是一团乱麻。这种情况导致我去找工作参加面试的时候，很多基础面都通过不了，最后侥幸进入一家要求不太高的创业公司，薪资不高，为了进大厂必须完善算法和计算机的知识。因为未知，所以恐惧，恐惧导致盲目的崇拜，我认为那些科班出身的程序员太牛逼了，居然可以掌握那么多繁杂的计算机知识；那些写源码分析的程序员都是大神；那些写算法题解的程序员都是高手。恐惧把小的问题放大，比如学到单调栈、双向链表、记忆化的内容，一看到题目要用到这些概念便觉得代码很难写，索性那些内容就不看，所以学了大半年还在原地踏步，还在原来的公司拿着微薄的工资做着 CURD。



二、战术上重视刷题战术，分为道与术。道回顾一下我们以前学数学的过程，会发现，数学题有千千万，最后在脑海中记住的并非是这道题的具体写法，而是解这道题的思路。算法刷题同样如此，很难做到让你把做过的题目代码都背下来，然后在面试的时候一五一十的写出来，但是你可能知道这道题的思路，用什么样的数据结构和什么样的算法思想，知道可以用这样那样的方法做出来，差的就是细节。也就是说，刷题和应试教育中的学习是一样的，都需要先经过大量刻意的重复练习，见多识广，才能在面试时做到游刃有余。说白了，就是要多刷才行。这里的多刷题，不是指多瞎刷题，而是有方法的去刷，有目的的练习，而一个合理的练习方式，比练习的时间长短，更为重要。如何做到有目的的进行练习，大概可以分为以下五个步骤：1、找到具有定义明确的具体特定目标 2、具有专注练习的状态 3、找到导师模仿练习 4、走出舒适圈，突破自我 5、强化前行的理由

1、找到具有定义明确的具体特定目标目标必须是十分具体的，可以逐个解决，把目标进行分类并制定一个可实施的计划。目标是什么？通过算法面试不是目标，而是一个结果，我们的目标是怎么样合理的刷完算法面试需要的那些题目，推荐的做法是按照标签来刷，难度上循序渐进，即把多种同类型的题先放在一起来做，比如一个时间段，只刷链表题，待刷得差不多的时候，接下来再刷二叉树的题。由于不断的刷同个类型的题目，相当于在不断的重复练习，可以不断地加深自己对某个数据结构的理解，刷到后面可能发现这类题目都是有固定的套路，甚至一部分代码都是一模一样的。这种刷法不仅在大方向上找到具有定义明确的具体特定目标，即合理的刷完算法面试需要的那些题目，与此同时，当刷同类型的题目出现困惑时，也能有目的性的去搜索相关的特定资料。


2、具有专注练习的状态不建议在一开始刷题就去搜索一些模板来背，然后在解题的时候套模板，这样的刷题只是重复而不是练习，收获的只是经历而不是经验，背的再熟练，平时写的多块，没有自己的一个完整思考过程，在面试时很容易卡壳。在刷题的过程中，争取做到三件事：1、当写出 AC 的代码时，思考为什么自己可以做到2、当写出 AC 的代码时，思考能不能优化一些3、是否用到了题目给出的所有条件很多题目都是由相似的题目改编而来的，增删一些条件题目的难度就会发生巨大的提升，基于这三个思考，每道题目都去多想一步，一步一步再一步，不同维度不同姿势都尝试一下，不要满足于一种解法，各种解法都写一写，争取做到 beat 100%，把每个题目都做干净，彻底攻克一道题。

3、找到导师模仿练习搜索任何一道算法题，在网上都能发现不少文章，不过很多文章都是只提供解题代码或者加上一些简单的文字说明，为什么要这么写以及是怎么样想到这些方法的很少有文章会涉及到，这些人是高手，却不是导师。高手和导师最大的区别在于，很多高手未必可以总结出自己的方法论，他们真的很牛逼但核心内容却只可意会不可言传，而导师一定有一套可以复制的方法论，他或许不一定是最牛逼的，但却是最适合模仿学习的。目前 LeetCode 的题解区有不少大神写了不少细致的题解，找几个你看的顺眼的，模仿他们的思路去思考问题。然后悄咪咪的吹一下自己，我利用动画的形式讲解算法，写了几百篇文章了，期间有不少人也在模仿我的风格去写作，取得了不错的效果，我最近把精力花在自己的个人网站 AlgoMooc 上，立志于更加细致的讲解 LeetCode，如果你找不到合适的导师，不妨访问 https://www.algomooc.com 来看看我的文章，我争取每道题目都录制视频，用五分钟讲清楚。

4、走出舒适圈，突破自我当我们跌跌撞撞的刷了一些题目时，实际上，刷题已经变成了我们的舒适圈，在这个圈子中，你已经可以熟练的掌握了一些知识，如果我们想让练习取得成绩，我们得逼着自己走出舒适圈，最好的方法是自己去写题解，写一篇新手也能看懂的题解。也就是熟知的费曼学习法。什么是费曼学习法呢？简单来说就是以教促学，每当你认为学会或者掌握一个知识后，去给别人讲明白，通过这种方式对自己做一个检验，突破自我。李笑来曾经分享过一个观点，他说教育主要分为 3 个环节——1、 教：我们最常做的读书、学习、听课等  2、 练：就是练习，大量练习，重复练习  3、 教练：在练习过程中遇到问题，教练帮忙指出来，然后继续练。  1、2 不断循环，直到把知识、技能练熟，能用到实践中，帮自己做成一些事情，创造价值。以此作为参考，刷题也是可以分为 3 个环节---1、学：阅读别人的提交2、练：就是练习，模仿别人的思路来练习3、教：就是教练，通过写题解的形式给别人讲明白一道题目1、2 两点属于被动学习，吸收效率在 10% 至 30% 之间，而 3 属于主动学习，也就是费曼学习，吸收效率高达 90% 。<img src="https://pica.zhimg.com/50/v2-a1dba37913884f9f759dae971e1e3545_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="665" data-rawheight="377" class="origin_image zh-lightbox-thumb" width="665" data-original="https://pica.zhimg.com/v2-a1dba37913884f9f759dae971e1e3545_r.jpg?source=1940ef5c"/>也就是说，我们在刷题的过程中，为了提高学习效率，可以主动的去写技术博客分享，注意是写技术博客而非技术笔记，笔记是给自己看的，博客是给别人看的，在这个过程中，表面上你是在教会别人，事实上你通过教会别人的方式来逼自己查缺补漏，你可能以为你懂了，结果发现无法表达出来，事实上还是没有理解透彻；你以为你讲明白了，别人一问，发现还是有遗漏点。

5、强化前行的理由当初你觉得进行刷题提升自己的时候，什么是你的动力？这个问题最好在一开始的时候就想清楚，并记录下来。在《思维的囚徒》一书中，提及到一个原则，叫：自由地选择你的态度 —— 人无论在什么情况下，都可以自由选择自己的态度。事实上，任何一件事情，我们都能找到它的意义，它能帮助自己变得更好的角度。刷题这个过程必然是有难度的，会给自己很大的压力，所以一开始先把你认为刷题后能带来的积极结果写下来，越多越好，不管现实与否，每当你想要放弃的时候，多想想这些积极的结果，想想熬过这个痛苦的过程能提升多大的改变。


https://www.zhihu.com/question/379857231

